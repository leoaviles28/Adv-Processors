# This program takes an input string from user and print it to the console
# Procedure:
# 1. Create a buffer ("inputString" in this case) to store the input string
# 2. Load the address of the buffer to register $a0
# 3. Load the length of the buffer to register $a1
# 4. Load register $v0 with 8
# 5. Issue "syscall"
.data			# What follows will be data
inputString: .space 64	# set aside 64 bytes to store the input string
prompt: .asciiz "Enter a string: "
display: .asciiz "You typed: "
error: .asciiz "   Error in equation        "
.text			# What follows will be actual code

li $s7,40 #reg containing (
main: 
	# Display prompt
	la	$a0, prompt	# display the prompt to begin
	li	$v0, 4	# system call code to print a string to console
	syscall
	# get the string from console
	la	$a0, inputString	# load $a0 with the address of inputString; procedure: $a0 = buffer, $a1 = length of buffer
	la	$a1, inputString	# maximum number of character
	li	$v0, 8	# The system call code to read a string input
	syscall
move $s0,$a0
strcpy:
	addi $sp, $sp, -4 #adjust stack for 1 item
	sw $s0, 0($sp)  # save $s0
	add $s0, $zero, $zero #i = 0
L1: add $s1,$s0,$a1 #addr of y[i] in $t1
     lbu $t2, 0($s1) #$st2 = y[i]
     beq $t2,$s7,Handleleftpara
     ReturnFromCheck:
     add $t3,$s0,$a0 # addr of x[i]
     sb $t2, 0($t3) #x[i] = y[i]
     beq $t2, $zero,L2 # exit loop if y[i] == 0
     addi $s0,$s0,1 # i = i + i
     j L1 #next iteration of loop

L2: lw $s0, 0($sp) #restore saved $s0
addi $sp, $sp,4 #pop 1 item from stac k
beq $ra,$zero,L3 # if ra is zero jumps to l3
jr $ra # and return
	
L3:
move $a0,$t3
	# Print "You typed: " to console
	la	$a0, display	
	li	$v0, 4
	syscall
	# Print the entered string to console
	la	$a0, inputString
	li	$v0, 4
	syscall
j main
	
	
ERROR: 
# Print "ERROR: " to console
	la	$a0, error	
	li	$v0, 4
	syscall
j main

Handleleftpara:
 addi $s0,$s0,1 # i = i + i
add $s1,$s0,$a1 #addr of y[i] in $t1
     lbu $t2, 0($s1) #$st2 = y[i]
li $t3,47
li $t4,42
beq $t2,$t3, ERROR # HANDLES / ERROR
beq $t2,$t4, ERROR # HANDLES * ERROR
j RestorePointer

RestorePointer:
    subi $s0,$s0,1 # i = i - i
    j ReturnFromCheck
	
	
